package com.codingpixel.healingbudz.activity.home;import android.annotation.TargetApi;import android.app.Notification;import android.content.Context;import android.content.Intent;import android.content.pm.PackageManager;import android.content.pm.ResolveInfo;import android.graphics.Color;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.os.PersistableBundle;import android.provider.Settings;import android.support.annotation.NonNull;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentTransaction;import android.support.v4.app.NotificationCompat;import android.support.v4.widget.DrawerLayout;import android.support.v4.widget.SwipeRefreshLayout;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.util.Log;import android.view.Gravity;import android.view.HapticFeedbackConstants;import android.view.View;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.Button;import android.widget.CompoundButton;import android.widget.EditText;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import com.airbnb.deeplinkdispatch.DeepLink;import com.android.volley.Request;import com.bumptech.glide.Glide;import com.bumptech.glide.load.engine.DiskCacheStrategy;import com.bumptech.glide.load.resource.drawable.GlideDrawable;import com.bumptech.glide.request.RequestListener;import com.bumptech.glide.request.target.Target;import com.codingpixel.healingbudz.DataModel.HomeQAfragmentDataModel;import com.codingpixel.healingbudz.DataModel.HomeSearchListData;import com.codingpixel.healingbudz.DataModel.QuestionAnswersDataModel;import com.codingpixel.healingbudz.DataModel.ShootOutDataModel;import com.codingpixel.healingbudz.DataModel.User;import com.codingpixel.healingbudz.R;import com.codingpixel.healingbudz.Utilities.Constants;import com.codingpixel.healingbudz.Utilities.Flags;import com.codingpixel.healingbudz.Utilities.Utility;import com.codingpixel.healingbudz.Utilities.eventbus.MessageEvent;import com.codingpixel.healingbudz.activity.Registration.FinalStepProfileComplete;import com.codingpixel.healingbudz.activity.Wall.WallFeedsOtherFragment;import com.codingpixel.healingbudz.activity.Wall.WallNewPostActivity;import com.codingpixel.healingbudz.activity.Wall.WallPostDetailActivity;import com.codingpixel.healingbudz.activity.home.buz_feed.BuzzFeedActivity;import com.codingpixel.healingbudz.activity.home.home_fragment.HomeMainFragment;import com.codingpixel.healingbudz.activity.home.home_fragment.Strain_tab.StrainTabFragment;import com.codingpixel.healingbudz.activity.home.home_fragment.Strain_tab.straindetail.StrainDetailsActivity;import com.codingpixel.healingbudz.activity.home.home_fragment.budz_map_tab.AddNewBudzMapActivity;import com.codingpixel.healingbudz.activity.home.home_fragment.budz_map_tab.BudzMapDetailsActivity;import com.codingpixel.healingbudz.activity.home.home_fragment.budz_map_tab.BudzMapHomeFragment;import com.codingpixel.healingbudz.activity.home.home_fragment.groups_tab.GroupsChatViewActivity;import com.codingpixel.healingbudz.activity.home.home_fragment.groups_tab.GroupsMainTabFragment;import com.codingpixel.healingbudz.activity.home.home_fragment.journal_tab.JournalDetailsActivity;import com.codingpixel.healingbudz.activity.home.home_fragment.journal_tab.JournalTabFragment;import com.codingpixel.healingbudz.activity.home.home_fragment.qa_tab.AnswerFragment;import com.codingpixel.healingbudz.activity.home.home_fragment.qa_tab.DiscussQuestionFragment;import com.codingpixel.healingbudz.activity.home.home_fragment.qa_tab.QAUserNotifyScreenActivity;import com.codingpixel.healingbudz.activity.home.home_fragment.qa_tab.QA_HomeTabFragment;import com.codingpixel.healingbudz.activity.home.home_fragment.wall_feeds.WallFeedsMainFragment;import com.codingpixel.healingbudz.activity.home.side_menu.activitylog.ActivityLogActivity;import com.codingpixel.healingbudz.activity.home.side_menu.allbudz.AllBudzActivity;import com.codingpixel.healingbudz.activity.home.side_menu.help_support.HelpAndSupportActivity;import com.codingpixel.healingbudz.activity.home.side_menu.messages.MessagesActivity;import com.codingpixel.healingbudz.activity.home.side_menu.my_answers.EditAnswerFragment;import com.codingpixel.healingbudz.activity.home.side_menu.my_answers.MyAnswersActivity;import com.codingpixel.healingbudz.activity.home.side_menu.my_budzmap.MyBudzMapActivity;import com.codingpixel.healingbudz.activity.home.side_menu.my_questions.MyQuestionActivity;import com.codingpixel.healingbudz.activity.home.side_menu.myrewardz.MyRewardzActivity;import com.codingpixel.healingbudz.activity.home.side_menu.mysaves.MySavesActivity;import com.codingpixel.healingbudz.activity.home.side_menu.mystrains.MyStrainActivity;import com.codingpixel.healingbudz.activity.settings.SettingActivity;import com.codingpixel.healingbudz.activity.shoot_out.ShootOutActivity;import com.codingpixel.healingbudz.activity.shoot_out.dialog.ShootOutAlertDialog;import com.codingpixel.healingbudz.activity.splash.Splash;import com.codingpixel.healingbudz.adapter.HomeDrawerRecylerAdapter;import com.codingpixel.healingbudz.adapter.HomeSearchListRecylerAdapter;import com.codingpixel.healingbudz.customeUI.APPSwitch;import com.codingpixel.healingbudz.customeUI.CustomeToast;import com.codingpixel.healingbudz.data_structure.APIActions;import com.codingpixel.healingbudz.interfaces.BackInterface;import com.codingpixel.healingbudz.interfaces.DetectMenuBarHideListner;import com.codingpixel.healingbudz.interfaces.QAAddSubFragmentListner;import com.codingpixel.healingbudz.interfaces.getKeywordDialogItemClickListner;import com.codingpixel.healingbudz.interfaces.showSubFragmentListner;import com.codingpixel.healingbudz.network.VollyAPICall;import com.codingpixel.healingbudz.network.model.APIResponseListner;import com.codingpixel.healingbudz.network.model.URL;import com.codingpixel.healingbudz.sharedprefrences.SharedPrefrences;import com.codingpixel.healingbudz.static_function.IntentFunction;import com.google.android.gms.ads.AdListener;import com.google.android.gms.ads.AdRequest;import com.google.android.gms.ads.InterstitialAd;import com.google.android.gms.ads.MobileAds;import com.mancj.slideup.SlideUp;import com.mancj.slideup.SlideUpBuilder;import com.onesignal.shortcutbadger.ShortcutBadger;import org.greenrobot.eventbus.EventBus;import org.greenrobot.eventbus.Subscribe;import org.greenrobot.eventbus.ThreadMode;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.List;import static com.codingpixel.healingbudz.Utilities.KeywordClickDialog.isKeywordSearch;import static com.codingpixel.healingbudz.Utilities.KeywordClickDialog.isKeywordSearch_string;import static com.codingpixel.healingbudz.Utilities.SetUserValuesInSP.getSavedUser;import static com.codingpixel.healingbudz.Utilities.SetUserValuesInSP.save_UserValues;import static com.codingpixel.healingbudz.activity.home.home_fragment.budz_map_tab.BudzMapHomeFragment.budz_map_item_clickerd_dataModel;import static com.codingpixel.healingbudz.activity.home.home_fragment.budz_map_tab.BudzMapHomeFragment.budz_map_item_clickerd_dataModel_abc;import static com.codingpixel.healingbudz.activity.home.home_fragment.qa_tab.DiscussQuestionFragment.isNewScreen;import static com.codingpixel.healingbudz.activity.splash.Splash.user;import static com.codingpixel.healingbudz.data_structure.APIActions.ApiActions.get_shout_outs;import static com.codingpixel.healingbudz.data_structure.APIActions.ApiActions.global_search;import static com.codingpixel.healingbudz.network.model.URL.globle_search;import static com.codingpixel.healingbudz.network.model.URL.images_baseurl;import static com.codingpixel.healingbudz.network.model.URL.refresh_user_data;import static com.codingpixel.healingbudz.sharedprefrences.SharedPrefrences.setBool;import static com.codingpixel.healingbudz.sharedprefrences.SharedPrefrences.setString;import static com.codingpixel.healingbudz.static_function.IntentFunction.GoTo;import static com.codingpixel.healingbudz.static_function.IntentFunction.GoToHome;import static com.codingpixel.healingbudz.static_function.IntentFunction.GoToPassword;import static com.codingpixel.healingbudz.static_function.IntentFunction.GoToProfile;import static com.codingpixel.healingbudz.static_function.UIModification.ChangeStatusBarColor;import static com.codingpixel.healingbudz.static_function.UIModification.HideKeyboard;import static com.codingpixel.healingbudz.static_function.UIModification.ShowStatusBar;import static com.codingpixel.healingbudz.test_data.HomeDrawerData.home_drawer_data;import static com.codingpixel.healingbudz.test_data.HomeSearchTestData.home_search_list_data;//import com.google.android.gms.ads.identifier.AdListener;@DeepLink({URL.sharedBaseUrl + "/get-question-answers/{idq}"        , URL.sharedBaseUrl + "/get-shout-out/{ids}"        , URL.sharedBaseUrl + "/get-budz-special/{sp_id}/{idb}"        , URL.sharedBaseUrl + "/get-budz-service/{sp_id}/{idb}"        , URL.sharedBaseUrl + "/get-budz-product/{sp_id}/{idb}"        , URL.sharedBaseUrl + "/get-budz-review/{sp_id}/{idb}"        , URL.sharedBaseUrl + "/get-budz/{idb}"        , URL.sharedBaseUrl + "/get-strain-review/{sp_id}/{idst}"        , URL.sharedBaseUrl + "/get-strain-product/{sp_id}/{idst}"        , URL.sharedBaseUrl + "/strain-details/{idst}"        , URL.sharedBaseUrl + "/get-post/{idp}"        , URL.sharedBaseUrl + "/"        , URL.sharedBaseUrl        , URL.sharedBaseUrl + "/get-shoutout/{ids}"        , URL.sharedBaseUrl + "/changepassword?token={token_password}"        , URL.sharedBaseUrl + "/get-budz?business_id={idb}&business_type_id={type_bussiness}"})public class HomeActivity extends AppCompatActivity implements View.OnClickListener        , HomeDrawerRecylerAdapter.ItemClickListener        , DetectMenuBarHideListner, APIResponseListner        , HomeSearchListRecylerAdapter.ItemClickListener        , com.codingpixel.healingbudz.interfaces.getKeywordDialogItemClickListner        , showSubFragmentListner, QAAddSubFragmentListner        , BackInterface, ShootOutAlertDialog.OnDialogFragmentClickListener {    public static FragmentTransaction transaction;    public InterstitialAd mInterstitialAd;    //idq,ids,idb,idp,idst    public static FragmentManager manager;    ImageView menu_btn, q_a_menu_btn;    public static DrawerLayout drawerLayout;    RecyclerView drawer_recyler;    boolean ifPause = false;    ImageView Home_search_btn;    View Top_Line;    DiscussQuestionFragment discussQuestionFragment;    APPSwitch global_search_check_box_qa, global_search_check_box_user, global_search_check_box_groups, global_search_check_box_journals, global_search_check_box_strains, global_search_check_box_budzmap;    boolean isQa = false, isGroup = false, isJour = false, isStrain = false, isBudz = false;    boolean isUa = false, isUaOff = false, isQaOff = false, isGroupOff = false, isJourOff = false, isStrainOff = false, isBudzOff = false;    public static showSubFragmentListner showSubFragmentListner_object;    LinearLayout global_search_refresh;    ImageView gloobal_search_btn_click;    HomeSearchListRecylerAdapter global_Search_recyler_adapter;    SwipeRefreshLayout refresher;    public static ImageView Profile_Img;    public static ImageView Profile_Img_Sp;    public static TextView Profile_Name;    boolean isBack = false;    LinearLayout Profile_Button;    View Search_layout_view;    List<HomeSearchListData> home_search_list_data = new ArrayList<>();    EditText Home_search_editText;    RecyclerView Home_search_recyler_view;    RelativeLayout Home_search_Header;    LinearLayout Home_search_main_content_list;    RelativeLayout Home_Menu, Home_Buz_Feed_btn, Home_Shoot_out_btn;    QA_HomeTabFragment qa_homeTabFragment = new QA_HomeTabFragment(HomeActivity.this);    BudzMapHomeFragment budzMapHomeFragment = new BudzMapHomeFragment();    JournalTabFragment journalTabFragment = new JournalTabFragment();    GroupsMainTabFragment groupsMainTabFragment = new GroupsMainTabFragment();    StrainTabFragment strainTabFragment = new StrainTabFragment();    ImageView Home_Search_Back, Home_Search_Home;    RelativeLayout Home_search_filter_layout;    RelativeLayout bottom_bar_layout;    LinearLayout Home_search_filter_button;    ImageView Home_search_filter_layout_close_btn;    private SlideUp home_search_filter_slide;    ImageView Setting_Btn;    public static getKeywordDialogItemClickListner getKeywordDialogItemClickListner;    TextView Shout_Out_Counter, Budz_Feed_Counter;    FrameLayout screenLayout;    HomeMainFragment homeMainFragment;    private WallFeedsMainFragment wallFeedsMainFragment;    private WallFeedsOtherFragment myWallFeedFragment;    private int pages = 0;    private boolean isAppiCallActive = false;    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)    @Subscribe(threadMode = ThreadMode.MAIN)    public void onMessageEvent(MessageEvent event) {        callDeshBoardApi();    }    @Override    public void onStart() {        super.onStart();        EventBus.getDefault().register(this);    }    @Override    public void onStop() {        EventBus.getDefault().unregister(this);        super.onStop();    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_home);        Intent appLinkIntent = getIntent();        String appLinkAction = appLinkIntent.getAction();        Uri appLinkData = appLinkIntent.getData();        Intent intent = getIntent();        Intent receivedIntent = getIntent();        String receivedAction = receivedIntent.getAction();        String receivedType = receivedIntent.getType();        if (receivedAction != null)            if (receivedAction.equals(Intent.ACTION_SEND)) {                if (receivedType.startsWith("text/")) {                    String receivedText = receivedIntent.getStringExtra(Intent.EXTRA_TEXT);                    if (receivedText != null) {                        Log.d("URLSHARE", receivedText);                        if (SharedPrefrences.getBool("is_user_login", this)) {                            User user = getSavedUser(this);                            Splash.user = user;                            Bundle bundleTxt = new Bundle();                            bundleTxt.putString("urlhas", receivedText);                            Utility.launchActivity(this, WallNewPostActivity.class, true, bundleTxt);                        } else {                            IntentFunction.GoToSplash(this);                            finish();                        }                        //set the text                    }                    //handle sent text                }                //content is being shared            } else if (receivedAction.equals(Intent.ACTION_MAIN)) {            }        if (intent.getBooleanExtra(DeepLink.IS_DEEP_LINK, false)) {            String recipeId = "";            Bundle parameters = intent.getExtras();            if (parameters.containsKey("token")) {                if (!SharedPrefrences.getBool("is_user_login", this)) {                    GoToPassword(this, parameters.getString("token"));                    finish();                    return;                } else {                    IntentFunction.GoToSplash(this);                    finish();                    return;                }            }            // You can pass a query parameter with the URI, and it's also in parameters, like            // dld://classDeepLink?qp=12        }        if (user != null) {            user = getSavedUser(this);        }        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {            getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);            getWindow().setStatusBarColor(Color.TRANSPARENT);        }        getKeywordDialogItemClickListner = this;        showSubFragmentListner_object = this;        ShowStatusBar(HomeActivity.this);        MobileAds.initialize(this, Constants.add_init);        mInterstitialAd = new InterstitialAd(this);        mInterstitialAd.setAdUnitId(getString(R.string.ad_mob_id_add_ini_vid));        AdRequest adRequest = new AdRequest.Builder().build();        ;        mInterstitialAd.loadAd(adRequest);        mInterstitialAd.setAdListener(new AdListener() {            @Override            public void onAdFailedToLoad(int i) {                super.onAdFailedToLoad(i);            }            @Override            public void onAdLeftApplication() {                super.onAdLeftApplication();            }            @Override            public void onAdOpened() {                super.onAdOpened();            }            @Override            public void onAdClicked() {                super.onAdClicked();            }            @Override            public void onAdImpression() {                super.onAdImpression();            }            @Override            public void onAdLoaded() {                super.onAdLoaded();            }            //            @Override            public void onAdClosed() {                AdRequest adRequest = new AdRequest.Builder().build();                mInterstitialAd.loadAd(adRequest);                if (qa_homeTabFragment != null && qa_homeTabFragment.isVisible()) {                    qa_homeTabFragment.callAfterAddClosed();                }            }        });        DefineFragmentTransection();        Init();        LoadMainFragment();        InitDrawerContent();        SetUserProfileData();        try {            JSONObject login_data = new JSONObject();            String android_id = Settings.Secure.getString(HomeActivity.this.getContentResolver(),                    Settings.Secure.ANDROID_ID);            login_data.put("device_id", android_id);            login_data.put("user_id", user.getUser_id());            new VollyAPICall(HomeActivity.this, false, refresh_user_data, login_data, user.getSession_key(), Request.Method.POST, HomeActivity.this, APIActions.ApiActions.login);        } catch (JSONException e) {            e.printStackTrace();        }        // ATTENTION: This was auto-generated to handle app links.        intent = getIntent();        if (intent.getBooleanExtra(DeepLink.IS_DEEP_LINK, false)) {            String recipeId = "";            Bundle parameters = intent.getExtras();            if (Intent.ACTION_VIEW.equals(appLinkAction) && appLinkData != null) {                recipeId = appLinkData.getLastPathSegment();//                CustomeToast.ShowCustomToast(getApplicationContext(), recipeId, Gravity.TOP);            }            Log.d("TagMain", "Deeplink params: " + parameters);//idq,ids,idb,idp,idst            if (parameters.containsKey("idq")) {                HomeQAfragmentDataModel model = new HomeQAfragmentDataModel();                model.setId(Integer.valueOf(parameters.getString("idq")));                showSubFragmentListner_object.ShowQuestions(model, true);            } else if (parameters.containsKey("ids")) {                new VollyAPICall(this, true, URL.shout_detail + "/" + parameters.getString("ids", "0") + "?lat=" + Double.parseDouble(SharedPrefrences.getString("lat_cur", this)) + "&lng=" + Double.parseDouble(SharedPrefrences.getString("lng_cur", this)), new JSONObject(), user.getSession_key(), Request.Method.GET, this, get_shout_outs);            } else if (parameters.containsKey("idb") || parameters.containsKey("business_id")) {                Intent budzmap_intetn = new Intent(this, BudzMapDetailsActivity.class);                if (parameters.containsKey("business_id")) {                    budzmap_intetn.putExtra("budzmap_id", Integer.valueOf(parameters.getString("business_id")));                } else {                    budzmap_intetn.putExtra("budzmap_id", Integer.valueOf(parameters.getString("idb")));                }                startActivity(budzmap_intetn);            } else if (parameters.containsKey("idp")) {                launchPostDetailActivity(Integer.valueOf(parameters.getString("idp")));            } else if (parameters.containsKey("token")) {                if (!SharedPrefrences.getBool("is_user_login", this)) {                    GoToPassword(this, parameters.getString("token"));                } else {                    IntentFunction.GoToSplash(this);                }            } else if (parameters.containsKey("idst")) {                Intent strain_intetn = new Intent(this, StrainDetailsActivity.class);                strain_intetn.putExtra("strain_id", Integer.valueOf(parameters.getString("idst")));                startActivity(strain_intetn);            } else {                GoToHome(this, false);            }            // You can pass a query parameter with the URI, and it's also in parameters, like            // dld://classDeepLink?qp=12        }        if (Intent.ACTION_VIEW.equals(appLinkAction) && appLinkData != null) {            String recipeId = appLinkData.getLastPathSegment();//            CustomeToast.ShowCustomToast(getApplicationContext(), recipeId, Gravity.TOP);        }    }    void callDeshBoardApi() {        try {            JSONObject login_data = new JSONObject();            String android_id = Settings.Secure.getString(HomeActivity.this.getContentResolver(),                    Settings.Secure.ANDROID_ID);            login_data.put("device_id", android_id);            login_data.put("user_id", user.getUser_id());            new VollyAPICall(HomeActivity.this, false, refresh_user_data, login_data, user.getSession_key(), Request.Method.POST, HomeActivity.this, APIActions.ApiActions.login);        } catch (JSONException e) {            e.printStackTrace();        }    }    @Override    protected void onResume() {        super.onResume();//        if(homeMainFragment!=null && !homeMainFragment.isVisible()){//            ChangeStatusBarColor(HomeActivity.this, "#252220");//        }        callDeshBoardApi();        new VollyAPICall(this,                false                , URL.get_keywords                , new JSONObject()                , user.getSession_key()                , Request.Method.GET                , new APIResponseListner() {            @Override            public void onRequestSuccess(String response, APIActions.ApiActions apiActions) {                try {                    if (new JSONObject(response).getString("status").equalsIgnoreCase("success")) {                        JSONArray jsonObject = new JSONObject(response).getJSONArray("successData");                        Splash.keywordList = new ArrayList<>();                        for (int i = 0; i < jsonObject.length(); i++) {                            JSONObject object = jsonObject.getJSONObject(i);                            Splash.keywordList.add(object.getString("title"));                        }                    } else {                    }                } catch (JSONException e) {                    e.printStackTrace();                }            }            @Override            public void onRequestError(String response, APIActions.ApiActions apiActions) {            }        }                , APIActions.ApiActions.key_words);        if (discussQuestionFragment != null && discussQuestionFragment.isDetached() && discussQuestionFragment.isVisible()) {            this.bottomBar(false);        }    }    public void InitDrawerContent() {        drawer_recyler = (RecyclerView) findViewById(R.id.budz_question_recylreview);        new Handler().postDelayed(new Runnable() {            public void run() {                RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(HomeActivity.this);                drawer_recyler.setLayoutManager(layoutManager);                HomeDrawerRecylerAdapter recyler_adapter = new HomeDrawerRecylerAdapter(HomeActivity.this, home_drawer_data());                recyler_adapter.setClickListener(HomeActivity.this);                drawer_recyler.setAdapter(recyler_adapter);            }        }, 200);    }    public void Init() {        bottom_bar_layout = (RelativeLayout) findViewById(R.id.bottom_bar);        global_search_check_box_qa = (APPSwitch) findViewById(R.id.global_search_check_box_qa);        global_search_check_box_user = (APPSwitch) findViewById(R.id.global_search_check_box_user);        global_search_check_box_groups = (APPSwitch) findViewById(R.id.global_search_check_box_groups);        global_search_check_box_journals = (APPSwitch) findViewById(R.id.global_search_check_box_journals);        global_search_check_box_strains = (APPSwitch) findViewById(R.id.global_search_check_box_strains);        global_search_check_box_budzmap = (APPSwitch) findViewById(R.id.global_search_check_box_budzmap);        global_search_check_box_qa.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {            @Override            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                if (isChecked) {                    isQa = true;                } else {                    isQaOff = true;                }            }        });        global_search_check_box_user.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {            @Override            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                if (isChecked) {                    isUa = true;                } else {                    isUaOff = true;                }            }        });        global_search_check_box_budzmap.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {            @Override            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                if (isChecked) {                    isBudz = true;                } else {                    isBudzOff = true;                }            }        });        global_search_check_box_strains.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {            @Override            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                if (isChecked) {                    isStrain = true;                } else {                    isStrainOff = true;                }            }        });//        global_search_check_box_journals.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {//            @Override//            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {//                if (isChecked) {//                    isJour = true;//                } else {//                    isJourOff = true;//                }//            }//        });//        global_search_check_box_groups.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {//            @Override//            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {//                if (isChecked) {//                    isGroup = true;//                } else {//                    isGroupOff = true;//                }//            }//        });        screenLayout = (FrameLayout) findViewById(R.id.fragment_id);        Home_Search_Back = (ImageView) findViewById(R.id.back_btn);        gloobal_search_btn_click = (ImageView) findViewById(R.id.gloobal_search_btn_click);        global_search_refresh = (LinearLayout) findViewById(R.id.global_search_refresh);        Home_Search_Home = (ImageView) findViewById(R.id.home_btn);        Top_Line = findViewById(R.id.top_line);        Home_Search_Back.setOnClickListener(this);        Home_Search_Home.setOnClickListener(this);        Search_layout_view = findViewById(R.id.search_layout);        Home_search_editText = (EditText) findViewById(R.id.home_search_edit_text);        Home_search_editText.setOnClickListener(this);        Home_search_editText.setOnFocusChangeListener(new View.OnFocusChangeListener() {            @Override            public void onFocusChange(View view, boolean b) {                if (b) {                    Home_search_Header.setVisibility(View.VISIBLE);                    Home_search_main_content_list.setVisibility(View.VISIBLE);                } else {                    Search_layout_view.setVisibility(View.GONE);                    ChangeStatusBarColor(HomeActivity.this, "#1c1919");                }            }        });        Home_search_main_content_list = (LinearLayout) findViewById(R.id.home_search_list_view);        Home_search_Header = (RelativeLayout) findViewById(R.id.home_search_header);        drawerLayout = (DrawerLayout) findViewById(R.id.my_drawer_layout);        int width = getResources().getDisplayMetrics().widthPixels / 3;        menu_btn = (ImageView) findViewById(R.id.menu_btn);        menu_btn.setOnClickListener(this);        findViewById(R.id.home_bottom_tab_bar_budz_feed_btn).setOnClickListener(HomeActivity.this);        q_a_menu_btn = (ImageView) findViewById(R.id.q_a_menu_btn);        q_a_menu_btn.setOnClickListener(this);        Home_Menu = (RelativeLayout) findViewById(R.id.home_menu);        Home_Buz_Feed_btn = (RelativeLayout) findViewById(R.id.buz_feed);        Home_Buz_Feed_btn.setOnClickListener(this);        Home_Shoot_out_btn = (RelativeLayout) findViewById(R.id.shoot_out);        Home_Shoot_out_btn.setOnClickListener(this);        InitBottomTab();        Home_search_btn = (ImageView) findViewById(R.id.home_search);        Home_search_btn.setOnClickListener(this);        Home_search_filter_button = (LinearLayout) findViewById(R.id.home_search_filter_button_click);        Home_search_filter_button.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Home_search_filter_button.setVisibility(View.GONE);                home_search_filter_slide.show();            }        });        Profile_Button = (LinearLayout) findViewById(R.id.profile_btn_slide_menu);        Profile_Button.setOnClickListener(this);        Home_search_filter_layout = (RelativeLayout) findViewById(R.id.home_search_filter_layout);        Home_search_filter_layout_close_btn = (ImageView) findViewById(R.id.close_filter);        Home_search_filter_layout_close_btn.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                filter = "";                if (global_search_check_box_qa.isChecked()) {                    if (filter.length() == 0) {                        filter = filter + "q,a";                    } else {                        filter = filter + "," + "q,a";                    }                }                if (global_search_check_box_user.isChecked()) {                    if (filter.length() == 0) {                        filter = filter + "u";                    } else {                        filter = filter + "," + "u";                    }                }//                if (global_search_check_box_groups.isChecked()) {//                    if (filter.length() == 0) {//                        filter = filter + "g";//                    } else {//                        filter = filter + "," + "g";//                    }//                }                if (global_search_check_box_strains.isChecked()) {                    if (filter.length() == 0) {                        filter = filter + "s";                    } else {                        filter = filter + "," + "s";                    }                }                if (global_search_check_box_budzmap.isChecked()) {                    if (filter.length() == 0) {                        filter = filter + "bm";                    } else {                        filter = filter + "," + "bm";                    }                }                if (filter.length() == 0) {                    filter = "q,a,s,bm,u";                }//                if (global_search_check_box_journals.isChecked()) {//                    if (filter.length() == 0) {//                        filter = filter + "j";//                    } else {//                        filter = filter + "," + "j";//                    }//                }                if (isQa || isBudz || isGroup || isJour || isStrain || isQaOff || isBudzOff || isGroupOff || isJourOff || isStrainOff || isUa || isUaOff) {                    if (filter.length() > 0) {                        home_search_list_data.clear();                        global_Search_recyler_adapter.notifyDataSetChanged();                        HideKeyboard(HomeActivity.this);                        global_search_refresh.setVisibility(View.VISIBLE);                        JSONObject jsonObject = new JSONObject();                        isQa = false;                        isUa = false;                        isUaOff = false;                        isBudz = false;                        isGroup = false;                        isJour = false;                        isStrain = false;                        isQaOff = false;                        isBudzOff = false;                        isGroupOff = false;                        isJourOff = false;                        isStrainOff = false;                        isAppiCallActive = true;                        pages = 0;                        new VollyAPICall(HomeActivity.this, false, globle_search + "?query=" + Home_search_editText.getText().toString() + "&filter=" + filter + "&zip_code=" + user.getZip_code() + "&state=" + "", jsonObject, user.getSession_key(), Request.Method.GET, HomeActivity.this, global_search);                    }                }                home_search_filter_slide.hide();            }        });        home_search_filter_slide = new SlideUpBuilder(Home_search_filter_layout)                .withListeners(new SlideUp.Listener.Events() {                    @Override                    public void onSlide(float percent) {                    }                    @Override                    public void onVisibilityChanged(int visibility) {                        if (visibility == View.GONE) {                            Home_search_filter_button.setVisibility(View.VISIBLE);                        }                    }                })                .withStartGravity(Gravity.TOP)                .withLoggingEnabled(true)                .withStartState(SlideUp.State.HIDDEN)                .build();        Setting_Btn = (ImageView) findViewById(R.id.setting_btn);        Setting_Btn.setOnClickListener(this);        Shout_Out_Counter = (TextView) findViewById(R.id.shoor_out_counter);        Budz_Feed_Counter = (TextView) findViewById(R.id.budz_counter);        InitHomeSearchRecylerView();    }    String filter = "q,a,s,bm,u";    public void InitBottomTab() {        Button Tab_one = (Button) findViewById(R.id.tab_one);        Button Tab_two = (Button) findViewById(R.id.tab_two);        Button Tab_three = (Button) findViewById(R.id.tab_three);        Button Tab_four = (Button) findViewById(R.id.tab_four);        Button Tab_five = (Button) findViewById(R.id.tab_five);        Tab_one.setOnClickListener(this);        Tab_two.setOnClickListener(this);        Tab_three.setOnClickListener(this);        Tab_four.setOnClickListener(this);        Tab_five.setOnClickListener(this);    }    public void Model_Intent(String notification_activity, int Id) {        String activty_model = notification_activity;        if (activty_model.contains("Question")) {            HomeQAfragmentDataModel model_q = new HomeQAfragmentDataModel();            model_q.setId(Id);            showSubFragmentListner_object.ShowQuestions(model_q, true);//            finish();        } else if (activty_model.contains("Answers")) {            HomeQAfragmentDataModel model_a = new HomeQAfragmentDataModel();            model_a.setId(Id);            showSubFragmentListner_object.ShowAnswers(model_a, Id, true);//            finish();        } else if (activty_model.contains("Strains") || activty_model.contains("Strain")) {//            CallHomeViewFragment();            tabHomeClicked();            Intent strain_intetn = new Intent(this, StrainDetailsActivity.class);            strain_intetn.putExtra("strain_id", Id);            startActivity(strain_intetn);        } else if (activty_model.contains("Groups")) {//            CallHomeViewFragment();            tabHomeClicked();            Intent intent = new Intent(this, GroupsChatViewActivity.class);            intent.putExtra("goup_id", Id);            startActivity(intent);        } else if (activty_model.contains("Budz Map") || activty_model.contains("Budz Adz")) {//            CallHomeViewFragment();            tabHomeClicked();            Intent budzmap_intetn = new Intent(this, BudzMapDetailsActivity.class);            budzmap_intetn.putExtra("budzmap_id", Id);            startActivity(budzmap_intetn);        } else if (activty_model.contains("Journal")) {//            CallHomeViewFragment();            tabHomeClicked();            Intent journals_intetn = new Intent(this, JournalDetailsActivity.class);            journals_intetn.putExtra("journal_id", Id);            startActivity(journals_intetn);        }    }    private void launchPostDetailActivity(int postId) {        Bundle b = new Bundle();        b.putInt(Constants.POST_ID_EXTRA, postId);        Utility.launchActivityForResult(this, WallPostDetailActivity.class, b, Flags.ACTIVITIES_COMMUNICATION_FLAG);        //for fragment        //Utility.launchActivityForResultFromFragment(YOUR_FRAGMENT.this, getActivity(), b, Flags.ACTIVITIES_COMMUNICATION_FLAG);    }    public void checkNotificationCase(String notification_activity, String data) {        JSONObject jsonObject = null;        try {            jsonObject = new JSONObject(data);            switch (notification_activity) {                case "Groups":                    transaction.add(R.id.fragment_id_full_screen, new GroupsMainTabFragment(), "1");                    ChangeStatusBarColor(HomeActivity.this, "#171717");                    Top_Line.setBackgroundColor(Color.parseColor("#171717"));                    Top_Line.setVisibility(View.GONE);                    transaction.commitAllowingStateLoss();                    break;                case "group_invitation":                    transaction.add(R.id.fragment_id_full_screen, new GroupsMainTabFragment(true, getIntent().getExtras().getString("data")), "1");                    ChangeStatusBarColor(HomeActivity.this, "#171717");                    Top_Line.setBackgroundColor(Color.parseColor("#171717"));                    Top_Line.setVisibility(View.GONE);                    transaction.commitAllowingStateLoss();                    break;                case "Questions":                    HomeQAfragmentDataModel model = new HomeQAfragmentDataModel();                    model.setId(jsonObject.getInt("type_id"));                    showSubFragmentListner_object.ShowQuestions(model, true);//                    transaction.commitAllowingStateLoss();//                    finish();                    break;                case "Answers":                    HomeQAfragmentDataModel model1 = new HomeQAfragmentDataModel();                    model1.setId(jsonObject.getInt("type_id"));                    showSubFragmentListner_object.ShowAnswers(model1, jsonObject.getInt("type_id"), true);//                    transaction.commitAllowingStateLoss();//                    finish();                    break;                case "Special":                    CallHomeViewFragment();                    Intent shout_specail_sp = new Intent(this, BudzMapDetailsActivity.class);                    shout_specail_sp.putExtra("budzmap_id", jsonObject.getInt("type_id"));                    shout_specail_sp.putExtra("view_specials", true);                    startActivity(shout_specail_sp);                    break;                case "Budz Map":                case "Budz Adz":                case "Budz":                    CallHomeViewFragment();                    Intent budzmap_intetn = new Intent(this, BudzMapDetailsActivity.class);                    budzmap_intetn.putExtra("budzmap_id", jsonObject.getInt("type_id"));                    startActivity(budzmap_intetn);                    break;                case "Likes":                    Model_Intent(notification_activity, jsonObject.getInt("type_id"));                    break;                case "Favorites":                    Model_Intent(notification_activity, jsonObject.getInt("type_id"));                    break;                case "Journal":                    CallHomeViewFragment();                    Intent journals_intetn = new Intent(this, JournalDetailsActivity.class);                    journals_intetn.putExtra("journal_id", jsonObject.getInt("type_id"));                    startActivity(journals_intetn);                    break;                case "Tags":                    Model_Intent(notification_activity, jsonObject.getInt("type_id"));                    break;                case "Strains":                case "Strain":                    CallHomeViewFragment();                    Intent strain_intetn = new Intent(this, StrainDetailsActivity.class);                    strain_intetn.putExtra("strain_id", jsonObject.getInt("type_id"));                    startActivity(strain_intetn);                    break;                case "Users":                case "users":                    CallHomeViewFragment();                    isNewScreen = true;                    GoToProfile(this, jsonObject.getInt("type_id"));                    break;                case "Comment":                case "Post":                    CallHomeViewFragment();                    launchPostDetailActivity(jsonObject.getInt("type_id"));                    break;                case "ShoutOut":                case "shout_out":                case "shoot_out":                case "ShootOut":                    if (!jsonObject.isNull("shout_out")) {                        CallHomeViewFragment();                        if (jsonObject.getJSONObject("shout_out").has("sub_user_id")) {                            new VollyAPICall(this, true, URL.shout_detail + "/" + jsonObject.getJSONObject("shout_out").getInt("shout_out_id") + "?lat=" + Double.parseDouble(SharedPrefrences.getString("lat_cur", this)) + "&lng=" + Double.parseDouble(SharedPrefrences.getString("lng_cur", this)), new JSONObject(), user.getSession_key(), Request.Method.GET, this, get_shout_outs);//                            Intent shout_specail = new Intent(this, BudzMapDetailsActivity.class);//                            shout_specail.putExtra("budzmap_id", jsonObject.getJSONObject("shout_out").getInt("sub_user_id"));//                            shout_specail.putExtra("view_specials", true);//                            startActivity(shout_specail);                        } else {                            new VollyAPICall(this, true, URL.shout_detail + "/" + jsonObject.getJSONObject("shout_out").getInt("shout_out_id") + "?lat=" + Double.parseDouble(SharedPrefrences.getString("lat_cur", this)) + "&lng=" + Double.parseDouble(SharedPrefrences.getString("lng_cur", this)), new JSONObject(), user.getSession_key(), Request.Method.GET, this, get_shout_outs);//                            Intent shout_specail = new Intent(this, ShootOutActivity.class);//                            Shout_Out_Counter.setVisibility(View.GONE);//                            shout_specail.putExtra("id", jsonObject.getJSONObject("shout_out").getInt("shout_out_id"));//                            startActivity(shout_specail);                        }                    } else {                        CallHomeViewFragment();                        Shout_Out_Counter.setVisibility(View.GONE);                        GoTo(HomeActivity.this, ShootOutActivity.class);                    }                    break;                case "Reminder":                    GoTo(this, FinalStepProfileComplete.class);                    CallHomeViewFragment();                    break;                default:                    CallHomeViewFragment();                    break;            }        } catch (JSONException e) {            e.printStackTrace();            CallHomeViewFragment();        }    }    public void LoadMainFragment() {        if (transaction == null) {            DefineFragmentTransection();        }        if (!getIntent().getExtras().isEmpty()) {            if (getIntent().getExtras().getString("activityToBeOpened") != null) {                String notification_activity = getIntent().getExtras().getString("activityToBeOpened");                JSONObject jsonObject = null;                try {                    jsonObject = new JSONObject(getIntent().getExtras().getString("data"));                } catch (JSONException e) {                    e.printStackTrace();                }                if (jsonObject != null) {                    checkNotificationCase(notification_activity, getIntent().getExtras().getString("data"));                } else {                    ChangeStatusBarColor(HomeActivity.this, "#252220");                    Top_Line.setBackgroundColor(Color.parseColor("#252220"));                    Top_Line.setVisibility(View.GONE);                    tabHomeClicked();                }//                switch (notification_activity) {//                    case "Groups"://                        transaction.add(R.id.fragment_id_full_screen, new GroupsMainTabFragment(), "1");//                        ChangeStatusBarColor(HomeActivity.this, "#171717");//                        Top_Line.setBackgroundColor(Color.parseColor("#171717"));//                        Top_Line.setVisibility(View.GONE);//                        break;//                    case "group_invitation"://                        transaction.add(R.id.fragment_id_full_screen, new GroupsMainTabFragment(true, getIntent().getExtras().getString("data")), "1");//                        ChangeStatusBarColor(HomeActivity.this, "#171717");//                        Top_Line.setBackgroundColor(Color.parseColor("#171717"));//                        Top_Line.setVisibility(View.GONE);//                        break;//                }            } else {/*                homeMainFragment = new HomeMainFragment();                homeMainFragment.SetBackListener(HomeActivity.this);                transaction.add(R.id.fragment_id, homeMainFragment, "1");*/                ChangeStatusBarColor(HomeActivity.this, "#252220");                Top_Line.setBackgroundColor(Color.parseColor("#252220"));                Top_Line.setVisibility(View.GONE);                tabHomeClicked();            }        } else {/*            homeMainFragment = new HomeMainFragment();            homeMainFragment.SetBackListener(HomeActivity.this);*/            ChangeStatusBarColor(HomeActivity.this, "#252220");            Top_Line.setBackgroundColor(Color.parseColor("#252220"));            Top_Line.setVisibility(View.GONE);            tabHomeClicked();        }    }    public void hideSearchLayout() {        Home_search_editText.setText("");        if (Search_layout_view != null && Search_layout_view.getVisibility() == View.VISIBLE) {            Search_layout_view.setVisibility(View.GONE);            Home_search_editText.setText("");        }        Home_search_Header.setVisibility(View.VISIBLE);        Home_search_main_content_list.setVisibility(View.VISIBLE);    }    @Override    public void onSaveInstanceState(Bundle outState, PersistableBundle outPersistentState) {        outState.putString("WORKAROUND_FOR_BUG_19917_KEY", "WORKAROUND_FOR_BUG_19917_VALUE");        super.onSaveInstanceState(outState, outPersistentState);    }    @Override    public void onClick(View view) {        view.setHapticFeedbackEnabled(true);        view.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);        switch (view.getId()) {            case R.id.menu_btn:                HideKeyboard(this);                drawerLayout.openDrawer(Gravity.START);                break;            case R.id.q_a_menu_btn:                HideKeyboard(this);                drawerLayout.openDrawer(Gravity.START);                break;            case R.id.tab_one:                tabOneClickedFunctionalty();                break;            case R.id.home_bottom_tab_bar_budz_feed_btn: {                tabHomeClicked();            }            break;            case R.id.tab_two:                hideSearchLayout();                HideKeyboard(this);                DetachExtraFragents();                DetachOtherTabFragments(1);                HomeActivity.this.runOnUiThread(new Runnable() {                    @Override                    public void run() {                        transaction = manager.beginTransaction();                        if (!groupsMainTabFragment.isVisible()) {                            if (transaction.isEmpty()) {                                transaction.add(R.id.fragment_id_full_screen, groupsMainTabFragment, "1");                            } else {                                transaction.replace(R.id.fragment_id_full_screen, groupsMainTabFragment, "1");                            }                            transaction.commitAllowingStateLoss();                        } else {                            if (discussQuestionFragment != null) {                                if (discussQuestionFragment.isVisible()) {                                    transaction.remove(discussQuestionFragment);                                    transaction.commitAllowingStateLoss();                                }                            }                        }                    }                });                break;            case R.id.tab_three:                hideSearchLayout();                DetachExtraFragents();                DetachOtherTabFragments(2);                HomeActivity.this.runOnUiThread(new Runnable() {                    @Override                    public void run() {                        transaction = manager.beginTransaction();                        if (!journalTabFragment.isVisible()) {                            if (transaction.isEmpty()) {                                transaction.add(R.id.fragment_id_full_screen, journalTabFragment, "1");                            } else {                                transaction.replace(R.id.fragment_id_full_screen, journalTabFragment, "1");                            }                            transaction.commitAllowingStateLoss();                        } else {                            if (discussQuestionFragment != null) {                                if (discussQuestionFragment.isVisible()) {                                    transaction.remove(discussQuestionFragment);                                    transaction.commitAllowingStateLoss();                                }                            }                        }                    }                });                break;            case R.id.tab_four:                tabStarinClicked();                break;            case R.id.tab_five:                hideSearchLayout();                DetachExtraFragents();                DetachOtherTabFragments(4);                HomeActivity.this.runOnUiThread(new Runnable() {                    @Override                    public void run() {                        transaction = manager.beginTransaction();                        if (!budzMapHomeFragment.isVisible()) {                            if (transaction.isEmpty()) {                                transaction.add(R.id.fragment_id_full_screen, budzMapHomeFragment, "1");                            } else {                                transaction.replace(R.id.fragment_id_full_screen, budzMapHomeFragment, "1");                            }                            transaction.commitAllowingStateLoss();                        } else {                            if (discussQuestionFragment != null) {                                if (discussQuestionFragment.isVisible()) {                                    transaction.remove(discussQuestionFragment);                                    transaction.commitAllowingStateLoss();                                }                            }                        }                    }                });                break;            case R.id.buz_feed:                Budz_Feed_Counter.setVisibility(View.GONE);                GoTo(HomeActivity.this, BuzzFeedActivity.class);                break;            case R.id.shoot_out:                Shout_Out_Counter.setVisibility(View.GONE);                GoTo(HomeActivity.this, ShootOutActivity.class);                break;            case R.id.home_search:                ChangeStatusBarColor(HomeActivity.this, "#5c9233");                Search_layout_view.setVisibility(View.VISIBLE);//                Search_layout_view.setClickable(true);//                Search_layout_view.setOnClickListener(true);//                Search_layout_view.setOnTouchListener(null);                Home_search_Header.setVisibility(View.GONE);                Home_search_main_content_list.setVisibility(View.GONE);                Animation startAnimation = AnimationUtils.loadAnimation(getApplicationContext(), R.anim.fade_in);                Search_layout_view.startAnimation(startAnimation);                break;            case R.id.home_search_edit_text:                Home_search_Header.setVisibility(View.VISIBLE);                Home_search_main_content_list.setVisibility(View.VISIBLE);                break;            case R.id.back_btn:                HideKeyboard(HomeActivity.this);                hideSearchLayout();                ChangeStatusBarColor(HomeActivity.this, "#1c1919");                CallHomeViewFragment();                break;            case R.id.home_btn:                HideKeyboard(HomeActivity.this);                hideSearchLayout();                Home_search_editText.setText("");                ChangeStatusBarColor(HomeActivity.this, "#1c1919");                break;            case R.id.profile_btn_slide_menu:                drawerLayout.closeDrawer(Gravity.START);                GoToProfile(HomeActivity.this, user.getUser_id());                break;            case R.id.setting_btn:                GoTo(HomeActivity.this, SettingActivity.class);                break;        }    }    private void tabStarinClicked() {        hideSearchLayout();        DetachExtraFragents();        DetachOtherTabFragments(3);        HomeActivity.this.runOnUiThread(new Runnable() {            @Override            public void run() {                transaction = manager.beginTransaction();                if (!strainTabFragment.isVisible()) {                    if (transaction.isEmpty()) {                        transaction.add(R.id.fragment_id_full_screen, strainTabFragment, "1");                    } else {                        transaction.replace(R.id.fragment_id_full_screen, strainTabFragment, "1");                    }                    transaction.commitAllowingStateLoss();                } else {                    if (discussQuestionFragment != null) {                        if (discussQuestionFragment.isVisible()) {                            transaction.remove(discussQuestionFragment);                            transaction.commitAllowingStateLoss();                        }                    }                }            }        });    }    private void CallHomeViewFragment() {        tabHomeClicked();//        hideSearchLayout();//        HideKeyboard(this);//        DetachExtraFragents();//        DetachOtherTabFragments(0);//        DetachOtherTabFragments(-1);//        DetachOtherTabFragments(1);//        DetachOtherTabFragments(2);//        DetachOtherTabFragments(3);//        DetachOtherTabFragments(4);//        HomeActivity.this.runOnUiThread(new Runnable() {//            @Override//            public void run() {//                transaction = manager.beginTransaction();//                Home_Menu.setVisibility(View.VISIBLE);//                ChangeStatusBarColor(HomeActivity.this, "#00000000");//                Top_Line.setBackgroundColor(Color.parseColor("#6FAE3E"));//                Top_Line.setVisibility(View.VISIBLE);//                homeMainFragment = new HomeMainFragment();//                homeMainFragment.SetBackListener(HomeActivity.this);//                if (!homeMainFragment.isVisible()) {//                    if (discussQuestionFragment != null) {//                        if (discussQuestionFragment.isVisible()) {//                            transaction.remove(discussQuestionFragment);////                            transaction.commitAllowingStateLoss();//                        }//                    }//                    if (transaction.isEmpty()) {//                        transaction.add(R.id.fragment_id, homeMainFragment, "1");//                    } else {//                        transaction.replace(R.id.fragment_id, homeMainFragment, "1");//                    }//////                } else {//                    if (discussQuestionFragment != null) {//                        if (discussQuestionFragment.isVisible()) {//                            transaction.remove(discussQuestionFragment);////                            transaction.commitAllowingStateLoss();//                        }//                    }//                    if (transaction.isEmpty()) {//                        transaction.add(R.id.fragment_id, homeMainFragment, "1");//                    } else {//                        transaction.replace(R.id.fragment_id, homeMainFragment, "1");//                    }////                }//                transaction.commitAllowingStateLoss();//                home_search_list_data.clear();//                global_Search_recyler_adapter.notifyDataSetChanged();//            }//        });    }    private void tabHomeClicked() {        callDeshBoardApi();        hideSearchLayout();        HideKeyboard(this);        DetachExtraFragents();        DetachOtherTabFragments(-1);        HomeActivity.this.runOnUiThread(new Runnable() {            @Override            public void run() {                transaction = manager.beginTransaction();                if (wallFeedsMainFragment != null && !wallFeedsMainFragment.isVisible()) {                    if (transaction.isEmpty()) {                        if (wallFeedsMainFragment.isAdded()) {                            transaction.remove(wallFeedsMainFragment);                        }                        transaction.add(R.id.fragment_id_full_screen, wallFeedsMainFragment, "1");                    } else {                        transaction.replace(R.id.fragment_id_full_screen, wallFeedsMainFragment, "1");                    }                    transaction.commitAllowingStateLoss();                } else if (wallFeedsMainFragment == null) {                    wallFeedsMainFragment = new WallFeedsMainFragment();                    if (transaction.isEmpty()) {                        transaction.add(R.id.fragment_id_full_screen, wallFeedsMainFragment, "1");                    } else {                        transaction.replace(R.id.fragment_id_full_screen, wallFeedsMainFragment, "1");                    }                    transaction.commitAllowingStateLoss();                } else {                    if (discussQuestionFragment != null) {                        if (discussQuestionFragment.isVisible()) {                            transaction.remove(discussQuestionFragment);                            transaction.commitAllowingStateLoss();                        }                    }                }            }        });    }    private void tabHomeClicked(final int id) {        hideSearchLayout();        HideKeyboard(this);        DetachExtraFragents();        DetachOtherTabFragments(-2);        HomeActivity.this.runOnUiThread(new Runnable() {            @Override            public void run() {                transaction = manager.beginTransaction();                if (myWallFeedFragment == null) {                    myWallFeedFragment = new WallFeedsOtherFragment(id, false, null, null);                }                if (!myWallFeedFragment.isVisible()) {                    if (transaction.isEmpty()) {                        if (myWallFeedFragment.isAdded()) {                            transaction.remove(myWallFeedFragment);                        }                        transaction.add(R.id.fragment_id_full_screen, myWallFeedFragment, "1");                    } else {                        transaction.replace(R.id.fragment_id_full_screen, myWallFeedFragment, "1");                    }                    transaction.commitAllowingStateLoss();                } else {                    if (discussQuestionFragment != null) {                        if (discussQuestionFragment.isVisible()) {                            transaction.remove(discussQuestionFragment);                            transaction.commitAllowingStateLoss();                        }                    }                }            }        });    }    private void tabOneClickedFunctionalty() {        hideSearchLayout();        HideKeyboard(this);        DetachExtraFragents();        DetachOtherTabFragments(0);        HomeActivity.this.runOnUiThread(new Runnable() {            @Override            public void run() {                transaction = manager.beginTransaction();                if (!qa_homeTabFragment.isVisible()) {                    if (transaction.isEmpty()) {                        transaction.remove(budzMapHomeFragment);                        //transaction.setCustomAnimations(R.anim.attatch_fragment_left_to_right , R.anim.fade_out);                        transaction.add(R.id.fragment_id_full_screen, qa_homeTabFragment, "1");                    } else {                        transaction.remove(budzMapHomeFragment);                        // transaction.setCustomAnimations(R.anim.attatch_fragment_left_to_right , R.anim.fade_out);                        transaction.replace(R.id.fragment_id_full_screen, qa_homeTabFragment = new QA_HomeTabFragment(HomeActivity.this), "1");                    }                    transaction.commitAllowingStateLoss();                    Home_Menu.setVisibility(View.GONE);                } else {                    qa_homeTabFragment.DetachSubFragments();                    if (discussQuestionFragment != null) {                        if (discussQuestionFragment.isVisible()) {                            transaction.remove(discussQuestionFragment);                            transaction.commitAllowingStateLoss();                        }                    }                }            }        });    }    public void clearSearch() {        Home_search_editText.setText("");        ChangeStatusBarColor(HomeActivity.this, "#00000000");        if (Search_layout_view != null && Search_layout_view.getVisibility() == View.VISIBLE) {            Search_layout_view.setVisibility(View.GONE);            Home_search_editText.setText("");        }        Home_search_Header.setVisibility(View.VISIBLE);        Home_search_main_content_list.setVisibility(View.VISIBLE);    }    @TargetApi(Build.VERSION_CODES.M)    public void InitHomeSearchRecylerView() {        Home_search_recyler_view = (RecyclerView) findViewById(R.id.home_search_recyler_view);        refresher = (SwipeRefreshLayout) findViewById(R.id.refresher);        refresher.setRefreshing(false);        RecyclerView.LayoutManager layoutManager_home_saerch = new LinearLayoutManager(HomeActivity.this);        Home_search_recyler_view.setLayoutManager(layoutManager_home_saerch);        home_search_list_data();        global_Search_recyler_adapter = new HomeSearchListRecylerAdapter(HomeActivity.this, home_search_list_data);        global_Search_recyler_adapter.setClickListener(this);        Home_search_recyler_view.setAdapter(global_Search_recyler_adapter);        Home_search_recyler_view.setOnScrollChangeListener(new View.OnScrollChangeListener() {            @Override            public void onScrollChange(View v, int scrollX, int scrollY, int oldScrollX, int oldScrollY) {                LinearLayoutManager layoutManager = LinearLayoutManager.class.cast(Home_search_recyler_view.getLayoutManager());                int lastVisible = layoutManager.findLastVisibleItemPosition();                Log.d("vissible", lastVisible + "");                Log.d("vissible_t", (lastVisible % 10) + "");                if (lastVisible >= (pages + 1) * 9 && !isAppiCallActive) {                    if ((lastVisible % 9) == 0 || lastVisible > 10) {                        pages = pages + 1;                        JSONObject jsonObject = new JSONObject();                        String url = "";                        refresher.setRefreshing(true);//                        global_search_refresh.setVisibility(View.VISIBLE);                        new VollyAPICall(HomeActivity.this                                , false, globle_search + "?query=" + Home_search_editText.getText().toString() + "&zip_code=" + user.getZip_code() + "&filter=" + filter + "&state=" + "" + "&skip=" + pages                                , jsonObject, user.getSession_key()                                , Request.Method.GET                                , HomeActivity.this                                , global_search);                    }                }            }        });        gloobal_search_btn_click.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                if (Home_search_editText.getText().toString().trim().length() > 0) {                    HideKeyboard(HomeActivity.this);                    global_search_refresh.setVisibility(View.VISIBLE);                    JSONObject jsonObject = new JSONObject();                    isAppiCallActive = true;                    pages = 0;                    new VollyAPICall(HomeActivity.this                            , false                            , globle_search + "?query=" + Home_search_editText.getText().toString() + "&zip_code=" + user.getZip_code() + "&state=" + "" + "&skip=" + pages + "&filter=" + filter                            , jsonObject, user.getSession_key()                            , Request.Method.GET                            , HomeActivity.this                            , global_search);                } else {                    CustomeToast.ShowCustomToast(HomeActivity.this, "Please enter search text!", Gravity.TOP);                }            }        });    }    public void DefineFragmentTransection() {        manager = getSupportFragmentManager();        transaction = manager.beginTransaction();        transaction.disallowAddToBackStack();    }    @Override    public void onItemClick(View view, int position) {        hideSearchLayout();        switch (position) {            case 0://                drawerLayout.closeDrawer(Gravity.START);//                GoTo(this, FinalStepProfileComplete.class);                budz_map_item_clickerd_dataModel = null;                budz_map_item_clickerd_dataModel_abc = null;                Intent intent = new Intent(this, AddNewBudzMapActivity.class);                intent.putExtra("isSubcribed", false);                intent.putExtra("sub_user_id", "");                startActivity(intent);//                CallHomeViewFragment();                break;            case 1:                //CALL FOR LIST USERS                drawerLayout.closeDrawer(Gravity.START);                Intent budzAll = new Intent(HomeActivity.this, AllBudzActivity.class);                startActivity(budzAll);//                drawerLayout.closeDrawer(Gravity.START);//                tabHomeClicked(user.getUser_id());                break;            case 2:                drawerLayout.closeDrawer(Gravity.START);                tabHomeClicked(user.getUser_id());                break;            case 3:                drawerLayout.closeDrawer(Gravity.START);                Intent activity_log = new Intent(HomeActivity.this, ActivityLogActivity.class);                startActivity(activity_log);                break;            case 4:                drawerLayout.closeDrawer(Gravity.START);                Intent activity_messages = new Intent(HomeActivity.this, MessagesActivity.class);                startActivity(activity_messages);                break;            case 5://                drawerLayout.closeDrawer(Gravity.START);//                Intent activity_myjournals = new Intent(HomeActivity.this, MyJournalActivity.class);//                startActivity(activity_myjournals);//                break;//            case 3:                drawerLayout.closeDrawer(Gravity.START);                Intent activity_myquestions = new Intent(HomeActivity.this, MyQuestionActivity.class);                startActivity(activity_myquestions);                break;//            case 4:            case 6:                drawerLayout.closeDrawer(Gravity.START);                Intent activity_myanswers = new Intent(HomeActivity.this, MyAnswersActivity.class);                startActivity(activity_myanswers);                break;//            case 5://            case 4://                drawerLayout.closeDrawer(Gravity.START);//                Intent activity_mygroups = new Intent(HomeActivity.this, MyGroupsActivity.class);//                startActivity(activity_mygroups);//                break;            case 7://            case 6:                drawerLayout.closeDrawer(Gravity.START);                Intent activity_mystrains = new Intent(HomeActivity.this, MyStrainActivity.class);                startActivity(activity_mystrains);                break;            case 8:                drawerLayout.closeDrawer(Gravity.START);                Intent activity_mybudzmap = new Intent(HomeActivity.this, MyBudzMapActivity.class);                startActivity(activity_mybudzmap);                break;            case 9:                drawerLayout.closeDrawer(Gravity.START);                Intent activity_myreward = new Intent(HomeActivity.this, MyRewardzActivity.class);                startActivity(activity_myreward);                break;            case 10:                drawerLayout.closeDrawer(Gravity.START);                Intent activity_mysaves = new Intent(HomeActivity.this, MySavesActivity.class);                startActivity(activity_mysaves);                break;        }    }    public void HelpAndSupprort(View view) {        drawerLayout.closeDrawer(Gravity.START);        Intent activity_mysaves = new Intent(HomeActivity.this, HelpAndSupportActivity.class);        startActivity(activity_mysaves);    }    @Override    public void HideMenuBar() {        Home_Menu.setVisibility(View.GONE);    }    @Override    public Void ShowMenuBar() {        return null;    }    public void DetachOtherTabFragments(int tab_position) {//        ChangeStatusBarColor(HomeActivity.this, "#171717");        ChangeStatusBarColor(HomeActivity.this, "#252220");        DetachExtraFragents();        if (homeMainFragment != null && homeMainFragment.isVisible()) {            FragmentManager manager = getSupportFragmentManager();            FragmentTransaction transaction = manager.beginTransaction();            transaction.remove(homeMainFragment);            transaction.commitAllowingStateLoss();        }        if (tab_position == -2) {            if (qa_homeTabFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(qa_homeTabFragment);                transaction.commitAllowingStateLoss();            }            if (wallFeedsMainFragment != null && wallFeedsMainFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(wallFeedsMainFragment);                transaction.commitAllowingStateLoss();            }            if (budzMapHomeFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(budzMapHomeFragment);                transaction.commitAllowingStateLoss();            }            if (journalTabFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(journalTabFragment);                transaction.commitAllowingStateLoss();            }            if (strainTabFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(strainTabFragment);                transaction.commitAllowingStateLoss();            }            if (groupsMainTabFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(groupsMainTabFragment);                transaction.commitAllowingStateLoss();            }        }        if (tab_position == -1) {            if (myWallFeedFragment != null && myWallFeedFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(myWallFeedFragment);                transaction.commitAllowingStateLoss();            }            if (qa_homeTabFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(qa_homeTabFragment);                transaction.commitAllowingStateLoss();            }            if (budzMapHomeFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(budzMapHomeFragment);                transaction.commitAllowingStateLoss();            }            if (journalTabFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(journalTabFragment);                transaction.commitAllowingStateLoss();            }            if (strainTabFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(strainTabFragment);                transaction.commitAllowingStateLoss();            }            if (groupsMainTabFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(groupsMainTabFragment);                transaction.commitAllowingStateLoss();            }        } else if (tab_position == 0) {            if (myWallFeedFragment != null && myWallFeedFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(myWallFeedFragment);                transaction.commitAllowingStateLoss();            }            if (wallFeedsMainFragment != null && wallFeedsMainFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(wallFeedsMainFragment);                transaction.commitAllowingStateLoss();            }            if (budzMapHomeFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(budzMapHomeFragment);                transaction.commitAllowingStateLoss();            }            if (journalTabFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(journalTabFragment);                transaction.commitAllowingStateLoss();            }            if (strainTabFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(strainTabFragment);                transaction.commitAllowingStateLoss();            }            if (groupsMainTabFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(groupsMainTabFragment);                transaction.commitAllowingStateLoss();            }        } else if (tab_position == 1) {            if (myWallFeedFragment != null && myWallFeedFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(myWallFeedFragment);                transaction.commitAllowingStateLoss();            }            if (wallFeedsMainFragment != null && wallFeedsMainFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(wallFeedsMainFragment);                transaction.commitAllowingStateLoss();            }            if (budzMapHomeFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(budzMapHomeFragment);                transaction.commitAllowingStateLoss();            }            if (journalTabFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(journalTabFragment);                transaction.commitAllowingStateLoss();            }            if (strainTabFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(strainTabFragment);                transaction.commitAllowingStateLoss();            }            if (qa_homeTabFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(qa_homeTabFragment);                transaction.commitAllowingStateLoss();            }        } else if (tab_position == 2) {            if (myWallFeedFragment != null && myWallFeedFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(myWallFeedFragment);                transaction.commitAllowingStateLoss();            }            if (wallFeedsMainFragment != null && wallFeedsMainFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(wallFeedsMainFragment);                transaction.commitAllowingStateLoss();            }            if (qa_homeTabFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(qa_homeTabFragment);                transaction.commitAllowingStateLoss();            }            if (budzMapHomeFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(budzMapHomeFragment);                transaction.commitAllowingStateLoss();            }            if (strainTabFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(strainTabFragment);                transaction.commitAllowingStateLoss();            }            if (groupsMainTabFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(groupsMainTabFragment);                transaction.commitAllowingStateLoss();            }        } else if (tab_position == 3) {            if (myWallFeedFragment != null && myWallFeedFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(myWallFeedFragment);                transaction.commitAllowingStateLoss();            }            if (wallFeedsMainFragment != null && wallFeedsMainFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(wallFeedsMainFragment);                transaction.commitAllowingStateLoss();            }            if (qa_homeTabFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(qa_homeTabFragment);                transaction.commitAllowingStateLoss();            }            if (budzMapHomeFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(budzMapHomeFragment);                transaction.commitAllowingStateLoss();            }            if (groupsMainTabFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(groupsMainTabFragment);                transaction.commitAllowingStateLoss();            }            if (journalTabFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(journalTabFragment);                transaction.commitAllowingStateLoss();            }        } else if (tab_position == 4) {            if (myWallFeedFragment != null && myWallFeedFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(myWallFeedFragment);                transaction.commitAllowingStateLoss();            }            if (wallFeedsMainFragment != null && wallFeedsMainFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(wallFeedsMainFragment);                transaction.commitAllowingStateLoss();            }            if (qa_homeTabFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(qa_homeTabFragment);                transaction.commitAllowingStateLoss();            }            if (journalTabFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(journalTabFragment);                transaction.commitAllowingStateLoss();            }            if (strainTabFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(strainTabFragment);                transaction.commitAllowingStateLoss();            }            if (groupsMainTabFragment.isVisible()) {                FragmentManager manager = getSupportFragmentManager();                FragmentTransaction transaction = manager.beginTransaction();                transaction.remove(groupsMainTabFragment);                transaction.commitAllowingStateLoss();            }        }    }    public void DetachExtraFragents() {        Top_Line.setBackgroundColor(Color.parseColor("#252230"));        Top_Line.setVisibility(View.GONE);    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        switch (requestCode) {            case 12: {                // If request is cancelled, the result arrays are empty.                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {                }            }        }    }    @Override    public void onBackPressed() {        if (qa_homeTabFragment != null && qa_homeTabFragment.isVisible()) {            if (discussQuestionFragment != null && discussQuestionFragment.isVisible()) {                transaction = manager.beginTransaction();                transaction.remove(discussQuestionFragment);                tabOneClickedFunctionalty();                discussQuestionFragment = null;            } else if (qa_homeTabFragment != null && qa_homeTabFragment.discussQuestionFragment != null && qa_homeTabFragment.discussQuestionFragment.isVisible()) {                if (qa_homeTabFragment.answerFragment != null && qa_homeTabFragment.answerFragment.isVisible()) {                    qa_homeTabFragment.answerFragment.Close_Fragment.performClick();                } else {                    qa_homeTabFragment.DetachSubFragments();                }            } else if (qa_homeTabFragment.askQuestionFragment != null && qa_homeTabFragment.askQuestionFragment.isVisible()) {                qa_homeTabFragment.askQuestionFragment.Close_Fragment.performClick();            } else {                if (isBack) {                    super.onBackPressed();                    moveTaskToBack(true);                    finishAffinity();                    System.exit(0);                } else {                    isBack = true;                    CustomeToast.ShowCustomToast(this, "press again to exit!", Gravity.TOP);                    new Handler().postDelayed(new Runnable() {                        @Override                        public void run() {                            isBack = false;                        }                    }, 1500);                }            }        } else if (Search_layout_view != null && Search_layout_view.getVisibility() != View.VISIBLE) {            if (isBack) {                super.onBackPressed();                moveTaskToBack(true);                finishAffinity();                System.exit(0);            } else {                isBack = true;                CustomeToast.ShowCustomToast(this, "press again to exit!", Gravity.TOP);                new Handler().postDelayed(new Runnable() {                    @Override                    public void run() {                        isBack = false;                    }                }, 1500);            }        } else {//            hideSearchLayout();            CallHomeViewFragment();        }    }    public void SetUserProfileData() {        Profile_Img = (ImageView) findViewById(R.id.profile_immg);        Profile_Name = (TextView) findViewById(R.id.profile_nname);        Profile_Img_Sp = (ImageView) findViewById(R.id.profile_img_topi_side);        String name = "";        if (user.getFirst_name() != null) {            if (!user.getFirst_name().equalsIgnoreCase("null")) {                name = user.getFirst_name();            }        }        if (user.getLast_name() != null) {            if (!user.getLast_name().equalsIgnoreCase("null")) {                name = name + " " + user.getLast_name();            }        }        Profile_Name.setText(name);//        Profile_Name.setTextColor(Color.parseColor(Utility.getBudColor(user.getPoints())));        String imag_url = images_baseurl;        final String imag_url_sp = images_baseurl;        final String finalImag_url_sp = imag_url_sp;        if (user.getSpecial_icon().length() > 5) {            Profile_Img_Sp.setVisibility(View.VISIBLE);            new Handler().postDelayed(new Runnable() {                public void run() {                    final String finalImag_url_sp = images_baseurl + user.getSpecial_icon();                    Glide.with(getApplicationContext())                            .load(finalImag_url_sp)                            .diskCacheStrategy(DiskCacheStrategy.SOURCE)                            .placeholder(R.drawable.topi_ic)                            .listener(new RequestListener<String, GlideDrawable>() {                                @Override                                public boolean onException(Exception e, String model, Target<GlideDrawable> target, boolean isFirstResource) {                                    return false;                                }                                @Override                                public boolean onResourceReady(GlideDrawable resource, String model, Target<GlideDrawable> target, boolean isFromMemoryCache, boolean isFirstResource) {                                    Log.d("ready", model);                                    Profile_Img_Sp.setImageDrawable(resource);                                    return false;                                }                            })                            .into(Profile_Img_Sp);                }            }, 100);        } else {            Profile_Img_Sp.setVisibility(View.GONE);        }        if (user.getImage_path() != null) {            if (user.getImage_path().contains("http")) {                imag_url = user.getImage_path();            } else {                if (!user.getImage_path().equalsIgnoreCase("null") && user.getImage_path().length() > 0) {                    imag_url = imag_url + user.getImage_path();                } else if (!user.getAvatar().equalsIgnoreCase("null") && user.getAvatar().length() > 0) {                    imag_url = imag_url + user.getAvatar();                }            }            final String finalImag_url = imag_url;            new Handler().postDelayed(new Runnable() {                public void run() {                    Glide.with(getApplicationContext())                            .load(finalImag_url)                            .diskCacheStrategy(DiskCacheStrategy.SOURCE)                            .placeholder(R.drawable.ic_user_profile_green)                            .listener(new RequestListener<String, GlideDrawable>() {                                @Override                                public boolean onException(Exception e, String model, Target<GlideDrawable> target, boolean isFirstResource) {                                    return false;                                }                                @Override                                public boolean onResourceReady(GlideDrawable resource, String model, Target<GlideDrawable> target, boolean isFromMemoryCache, boolean isFirstResource) {                                    Log.d("ready", model);                                    Profile_Img.setImageDrawable(resource);                                    return false;                                }                            })                            .into(Profile_Img);                }            }, 100);        }    }    @Override    public void onRequestSuccess(String response, APIActions.ApiActions apiActions) {        if (apiActions == APIActions.ApiActions.login) {            try {                JSONObject obj = new JSONObject(response);                JSONObject session_object = obj.getJSONObject("successData").getJSONObject("session");                JSONObject user_object = obj.getJSONObject("successData").getJSONObject("user");                user.setId(session_object.getInt("id"));                user.setShow_budz_popup(true);                if (user_object.getInt("show_budz_popup") == 0) {                    user.setShow_budz_popup(false);                } else {                    user.setShow_budz_popup(true);                }                if (obj.getJSONObject("successData").getInt("sub_user") == 0) {                    user.setPaidBudz(false);                } else {                    user.setPaidBudz(true);                }                user.setUser_id(session_object.getInt("user_id"));                user.setDevice_type(session_object.getString("device_type"));                user.setDevice_type(session_object.getString("device_type"));                user.setDevice_id(session_object.getString("device_id"));                user.setLat(user_object.optDouble("lat"));                user.setLng(user_object.optDouble("lng"));                user.setSession_key(session_object.getString("session_key"));                user.setTime_zone(session_object.optString("time_zone"));                user.setFb_id(session_object.optString("fb_id"));                user.setG_id(session_object.optString("g_id"));                user.setCreated_at(session_object.optString("created_at"));                user.setUpdated_at(session_object.optString("updated_at"));                user.setSpecial_icon(user_object.getString("special_icon"));                user.setPoints(user_object.getInt("points"));                user.setFirst_name(user_object.getString("first_name"));                user.setLast_name(user_object.getString("last_name"));                user.setEmail(user_object.getString("email"));                user.setZip_code(user_object.getString("zip_code"));                user.setImage_path(user_object.getString("image_path"));                user.setUser_type(user_object.getString("user_type"));                user.setAvatar(user_object.getString("avatar"));                user.setCover(user_object.getString("cover"));                user.setBio(user_object.getString("bio"));                user.setLocation(user_object.getString("location"));                user.setNotificationCOunt(obj.getJSONObject("successData").getInt("notifications_count"));                setString("user_email", user.getEmail(), HomeActivity.this);                setString("user_password", SharedPrefrences.getString("user_password", HomeActivity.this), HomeActivity.this);                setBool("is_user_login", true, HomeActivity.this);                save_UserValues(user, HomeActivity.this);                if (wallFeedsMainFragment != null && wallFeedsMainFragment.isVisible())                    wallFeedsMainFragment.setImageUpdate();                if (obj.getJSONObject("successData").getInt("shout_outs_count") > 0) {                    Shout_Out_Counter.setVisibility(View.VISIBLE);                    Shout_Out_Counter.setText(obj.getJSONObject("successData").getInt("shout_outs_count") + "");                    if (wallFeedsMainFragment != null) {                        wallFeedsMainFragment.Shout_Out_Counter.setVisibility(View.GONE);                        wallFeedsMainFragment.Shout_Out_Counter.setText(obj.getJSONObject("successData").getInt("shout_outs_count") + "");                    }                    if (wallFeedsMainFragment != null) {                        if (user.isPaidBudz()) {                            wallFeedsMainFragment.Home_Shoot_out_btn.setVisibility(View.VISIBLE);                        } else {                            wallFeedsMainFragment.Home_Shoot_out_btn.setVisibility(View.GONE);                        }//                        wallFeedsMainFragment.Shout_Out_Counter.setVisibility(View.GONE);                    }                } else {                    Shout_Out_Counter.setVisibility(View.GONE);                    if (wallFeedsMainFragment != null) {                        if (user.isPaidBudz()) {                            if (wallFeedsMainFragment.Home_Shoot_out_btn != null)                                wallFeedsMainFragment.Home_Shoot_out_btn.setVisibility(View.VISIBLE);                        } else {                            if (wallFeedsMainFragment.Home_Shoot_out_btn != null)                                wallFeedsMainFragment.Home_Shoot_out_btn.setVisibility(View.GONE);                        }                        if (wallFeedsMainFragment.Shout_Out_Counter != null)                            wallFeedsMainFragment.Shout_Out_Counter.setVisibility(View.GONE);                    }                }                if (obj.getJSONObject("successData").getInt("notifications_count") > 0) {                    ShortcutBadger.applyCount(this, obj.getJSONObject("successData").getInt("notifications_count"));                    setBadge(this, obj.getJSONObject("successData").getInt("notifications_count"));                    if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {                        Notification notification = new NotificationCompat.Builder(this)                                .setContentTitle("New Messages")                                .setContentText("You've receiv  ed 3 new messages.")                                .setSmallIcon(R.mipmap.ic_app_icon_tm)                                .setNumber(obj.getJSONObject("successData").getInt("notifications_count"))                                .build();                        // Do something for lollipop and above versions                        ShortcutBadger.applyNotification(this, notification, obj.getJSONObject("successData").getInt("notifications_count"));                    }                    Budz_Feed_Counter.setVisibility(View.VISIBLE);                    Budz_Feed_Counter.setText(obj.getJSONObject("successData").getInt("notifications_count") + "");                    if (wallFeedsMainFragment != null && wallFeedsMainFragment.Budz_Feed_Counter != null) {                        wallFeedsMainFragment.Budz_Feed_Counter.setVisibility(View.VISIBLE);                        wallFeedsMainFragment.Budz_Feed_Counter.setText(obj.getJSONObject("successData").getInt("notifications_count") + "");                    }                } else {                    ShortcutBadger.removeCount(this);                    Budz_Feed_Counter.setVisibility(View.GONE);                    if (wallFeedsMainFragment != null && wallFeedsMainFragment.Budz_Feed_Counter != null) {                        wallFeedsMainFragment.Budz_Feed_Counter.setVisibility(View.GONE);                    }                }                SetUserProfileData();            } catch (JSONException e) {                e.printStackTrace();            }        } else if (apiActions == global_search) {            Log.d("response", response);            isAppiCallActive = false;            refresher.setRefreshing(false);            if (pages == 0) {                home_search_list_data.clear();            }            global_search_refresh.setVisibility(View.GONE);            try {                JSONArray jsonObject = new JSONObject(response).getJSONObject("successData").getJSONArray("records");                if (new JSONObject(response).getString("status").equalsIgnoreCase("error")) {                    CustomeToast.ShowCustomToast(getApplicationContext(), new JSONObject(response).getString("errorMessage"), Gravity.TOP);                }                for (int x = 0; x < jsonObject.length(); x++) {                    JSONObject object = jsonObject.getJSONObject(x);                    HomeSearchListData data = new HomeSearchListData();//                    if (object.getString("s_type").equalsIgnoreCase("a")) {//                        String id = object.getString("v_pk");//                        String[] sp = id.split("_");//                        data.setId(Integer.parseInt(sp[0]));//                    } else {                    data.setId(object.getInt("id"));//                    }                    data.setTitle(object.getString("title"));                    data.setDiscription(object.getString("description"));                    data.setIcon(SetIcon(object.getString("s_type")));                    data.setColor(setColor(object.getString("s_type")));                    data.setType(object.getString("s_type"));                    if (!checkIfContain(data)) {                        home_search_list_data.add(data);                        global_Search_recyler_adapter.notifyItemInserted(home_search_list_data.size() - 1);                    }                }                global_Search_recyler_adapter.notifyDataSetChanged();            } catch (IndexOutOfBoundsException | JSONException e) {                e.printStackTrace();            }        } else if (apiActions == get_shout_outs) {            try {                JSONObject object = new JSONObject(response).getJSONObject("successData").getJSONObject("shout_outs");                ShootOutDataModel shootOutDataModel = new ShootOutDataModel();                shootOutDataModel.setLikes_count(object.getInt("likes_count"));                shootOutDataModel.setUserlike_count(object.getInt("userlike_count"));                shootOutDataModel.setText("");//jsonObject.getJSONObject(x).getString("text")                shootOutDataModel.setId(object.getInt("id"));                shootOutDataModel.setUser_id(object.getInt("user_id"));                shootOutDataModel.setSub_user_id(object.getInt("sub_user_id"));                shootOutDataModel.setTitle(object.getString("title"));                shootOutDataModel.setMessage(object.getString("message"));                shootOutDataModel.setValidity_date(object.getString("validity_date"));                shootOutDataModel.setImage(object.optString("image"));                shootOutDataModel.setLat(object.optDouble("lat"));                shootOutDataModel.setLng(object.optDouble("lng"));                if (!object.isNull("budz_special_id"))                    shootOutDataModel.setBudzSpId(object.getInt("budz_special_id"));                else {                    shootOutDataModel.setBudzSpId(-1);                }                shootOutDataModel.setZip_code(object.optString("zip_code"));                shootOutDataModel.setPublic_location(object.optString("public_location"));                shootOutDataModel.setCreated_at(object.getString("created_at"));                shootOutDataModel.setUpdated_at(object.getString("updated_at"));                shootOutDataModel.setDistance(String.valueOf(Constants.distance(object.optDouble("lat"), object.optDouble("lng"), Double.parseDouble(SharedPrefrences.getString("lat_cur", this)), Double.parseDouble(SharedPrefrences.getString("lng_cur", this)))));//object.getString("distance")                shootOutDataModel.setReceived_From(object.getJSONObject("get_sub_user").getString("title"));                shootOutDataModel.setUser_Image_Path(object.getJSONObject("get_sub_user").getString("logo"));                shootOutDataModel.setAvatar("");                shootOutDataModel.setSpecial_icon("");                ShootOutAlertDialog shootOutAlertDialog = ShootOutAlertDialog.newInstance(this, shootOutDataModel);                shootOutAlertDialog.show(this.getSupportFragmentManager(), "dialog");            } catch (JSONException e) {                e.printStackTrace();            }        }    }    public static void setBadge(Context context, int count) {        String launcherClassName = getLauncherClassName(context);        if (launcherClassName == null) {            return;        }//        Intent intent = new Intent("android.intent.action.BADGE_COUNT_UPDATE");        Intent intent = new Intent("com.sonymobile.home.permission.PROVIDER_INSERT_BADGE");        intent.putExtra("badge_count", count);        intent.putExtra("badge_count_package_name", context.getPackageName());        intent.putExtra("badge_count_class_name", launcherClassName);        context.sendBroadcast(intent);    }    public static String getLauncherClassName(Context context) {        PackageManager pm = context.getPackageManager();        Intent intent = new Intent(Intent.ACTION_MAIN);        intent.addCategory(Intent.CATEGORY_LAUNCHER);        List<ResolveInfo> resolveInfos = pm.queryIntentActivities(intent, 0);        for (ResolveInfo resolveInfo : resolveInfos) {            String pkgName = resolveInfo.activityInfo.applicationInfo.packageName;            if (pkgName.equalsIgnoreCase(context.getPackageName())) {                String className = resolveInfo.activityInfo.name;                return className;            }        }        return null;    }    private boolean checkIfContain(HomeSearchListData data) {        return home_search_list_data.contains(data);    }    @Override    public void onRequestError(String response, APIActions.ApiActions apiActions) {        Log.d("response", response);        if (apiActions == global_search) {            try {                isAppiCallActive = false;                refresher.setRefreshing(false);//                home_search_list_data.clear();                global_search_refresh.setVisibility(View.GONE);                if (new JSONObject(response).getString("status").equalsIgnoreCase("error")) {                    CustomeToast.ShowCustomToast(getApplicationContext(), new JSONObject(response).getString("errorMessage"), Gravity.TOP);                }            } catch (JSONException e) {                e.printStackTrace();            }        }    }    public static int SetIcon(String type) {        home_search_list_data();        switch (type) {            case "bm":                return R.drawable.ic_budz_adn;            case "a":                return R.drawable.ic_tab_qa;            case "q":                return R.drawable.ic_tab_qa;            case "j":                return R.drawable.ic_tab_journal;            case "g":                return R.drawable.ic_tab_group;            case "s":                return R.drawable.ic_tab_strain;            case "u":                return R.drawable.ic_user_person;            default://                return R.drawable.ic_tab_journal;                return R.drawable.ic_block_group_icon;        }    }    public static String setColor(String type) {        switch (type) {            case "bm":                return "#942a89";            case "a":                return "#0082cb";            case "q":                return "#0082cb";            case "j":                return "#64a81f";            case "g":                return "#f79124";            case "s":                return "#f5c52f";            case "u":                return "#979797";            default:                return "#942a89";        }    }    @Override    public void onGlobalSearchItemClick(View view, int position) {        switch (home_search_list_data.get(position).getType()) {            case "a":                HideViewSearch();                HomeQAfragmentDataModel model1 = new HomeQAfragmentDataModel();                model1.setId(home_search_list_data.get(position).getId());                showSubFragmentListner_object.ShowAnswers(model1, home_search_list_data.get(position).getId(), true);                break;            case "q":                HideViewSearch();                HomeQAfragmentDataModel model = new HomeQAfragmentDataModel();                model.setId(home_search_list_data.get(position).getId());                showSubFragmentListner_object.ShowQuestions(model, true);                break;            case "g":                HideViewSearch();                ChangeStatusBarColor(HomeActivity.this, "#00000000");                Intent intent = new Intent(HomeActivity.this, GroupsChatViewActivity.class);                intent.putExtra("goup_id", home_search_list_data.get(position).getId());                startActivity(intent);                break;            case "j":                HideViewSearch();                ChangeStatusBarColor(HomeActivity.this, "#00000000");                Intent journals_intetn = new Intent(HomeActivity.this, JournalDetailsActivity.class);                journals_intetn.putExtra("journal_id", home_search_list_data.get(position).getId());                startActivity(journals_intetn);                break;            case "s":                HideViewSearch();                ChangeStatusBarColor(HomeActivity.this, "#00000000");                Intent strain_intetn = new Intent(HomeActivity.this, StrainDetailsActivity.class);                strain_intetn.putExtra("strain_id", home_search_list_data.get(position).getId());                startActivity(strain_intetn);                break;            case "bm":                HideViewSearch();                ChangeStatusBarColor(HomeActivity.this, "#00000000");                Intent budzmap_intetn = new Intent(HomeActivity.this, BudzMapDetailsActivity.class);                budzmap_intetn.putExtra("budzmap_id", home_search_list_data.get(position).getId());                startActivity(budzmap_intetn);                break;            case "u":                HideViewSearch();                ChangeStatusBarColor(HomeActivity.this, "#00000000");                isNewScreen = true;                GoToProfile(this, home_search_list_data.get(position).getId());                break;        }    }    private void HideViewSearch() {        Home_search_editText.setText("");        HideKeyboard(HomeActivity.this);        Home_search_editText.setText("");        hideSearchLayout();        ChangeStatusBarColor(HomeActivity.this, "#1c1919");    }    @Override    public void ShowQuestionsForKeyword(final String keyword) {//        keyword=keyword//        super.task        bottomBar(false);        DetachExtraFragents();        DetachOtherTabFragments(0);        HomeActivity.this.runOnUiThread(new Runnable() {            @Override            public void run() {                transaction = manager.beginTransaction();                if (!qa_homeTabFragment.isVisible()) {                    qa_homeTabFragment = new QA_HomeTabFragment(HomeActivity.this, true, keyword.trim() + "&type=question");                    if (transaction.isEmpty()) {                        transaction.remove(budzMapHomeFragment);                        transaction.add(R.id.fragment_id_full_screen, qa_homeTabFragment, "1");                    } else {                        transaction.remove(budzMapHomeFragment);                        transaction.replace(R.id.fragment_id_full_screen, qa_homeTabFragment, "1");                    }                    transaction.commitAllowingStateLoss();                    Home_Menu.setVisibility(View.GONE);                } else {                    qa_homeTabFragment.DetachSubFragments();                    qa_homeTabFragment.SearchFromKeyword(keyword.trim() + "&type=question");                }            }        });    }    @Override    public void ShowAnswersForKeyword(final String keyword) {        bottomBar(false);        DetachExtraFragents();        DetachOtherTabFragments(0);        HomeActivity.this.runOnUiThread(new Runnable() {            @Override            public void run() {                transaction = manager.beginTransaction();                if (!qa_homeTabFragment.isVisible()) {                    qa_homeTabFragment = new QA_HomeTabFragment(HomeActivity.this, true, keyword.trim() + "&type=answer");                    if (transaction.isEmpty()) {                        transaction.remove(budzMapHomeFragment);                        transaction.add(R.id.fragment_id_full_screen, qa_homeTabFragment, "1");                    } else {                        transaction.remove(budzMapHomeFragment);                        transaction.replace(R.id.fragment_id_full_screen, qa_homeTabFragment, "1");                    }                    transaction.commitAllowingStateLoss();                    Home_Menu.setVisibility(View.GONE);                } else {                    qa_homeTabFragment.DetachSubFragments();                    qa_homeTabFragment.SearchFromKeyword(keyword.trim() + "&type=answer");                    qa_homeTabFragment.isFromAnswer = true;                }            }        });    }    @Override    public void ShowGroupsForKeyword(final String keyword) {        bottomBar(false);        DetachExtraFragents();        DetachOtherTabFragments(1);        HomeActivity.this.runOnUiThread(new Runnable() {            @Override            public void run() {                transaction = manager.beginTransaction();                if (!groupsMainTabFragment.isVisible()) {                    groupsMainTabFragment = new GroupsMainTabFragment(keyword, true);                    if (transaction.isEmpty()) {                        transaction.add(R.id.fragment_id_full_screen, groupsMainTabFragment, "1");                    } else {                        transaction.replace(R.id.fragment_id_full_screen, groupsMainTabFragment, "1");                    }                    transaction.commitAllowingStateLoss();                } else {                    groupsMainTabFragment.SearchKeyword(keyword);                }            }        });    }    @Override    public void ShowJournalsForKeyword(final String keyword) {        bottomBar(false);        DetachExtraFragents();        DetachOtherTabFragments(2);        HomeActivity.this.runOnUiThread(new Runnable() {            @Override            public void run() {                transaction = manager.beginTransaction();                if (!journalTabFragment.isVisible()) {                    journalTabFragment = new JournalTabFragment(keyword, true);                    if (transaction.isEmpty()) {                        transaction.add(R.id.fragment_id_full_screen, journalTabFragment, "1");                    } else {                        transaction.replace(R.id.fragment_id_full_screen, journalTabFragment, "1");                    }                    transaction.commitAllowingStateLoss();                } else {                    journalTabFragment.SearchKeyword(keyword);                }            }        });    }    @Override    public void ShowStrainForKeyword(final String keyword) {        bottomBar(false);        DetachExtraFragents();        DetachOtherTabFragments(3);        HomeActivity.this.runOnUiThread(new Runnable() {            @Override            public void run() {                transaction = manager.beginTransaction();                if (!strainTabFragment.isVisible()) {                    strainTabFragment = new StrainTabFragment(keyword, true);                    if (transaction.isEmpty()) {                        transaction.add(R.id.fragment_id_full_screen, strainTabFragment, "1");                    } else {                        transaction.replace(R.id.fragment_id_full_screen, strainTabFragment, "1");                    }                    transaction.commitAllowingStateLoss();                } else {                    strainTabFragment.SearchKeyword(keyword);                }            }        });    }    @Override    public void ShowBudzMapForKeyword(String keyword) {        isKeywordSearch = true;        isKeywordSearch_string = keyword;        bottomBar(false);        DetachExtraFragents();        DetachOtherTabFragments(4);        HomeActivity.this.runOnUiThread(new Runnable() {            @Override            public void run() {                transaction = manager.beginTransaction();                if (!budzMapHomeFragment.isVisible()) {                    if (transaction.isEmpty()) {                        if (budzMapHomeFragment != null && budzMapHomeFragment.isAdded()) {                            transaction.remove(budzMapHomeFragment);                        }                        transaction.add(R.id.fragment_id_full_screen, budzMapHomeFragment, "1");                    } else {                        transaction.replace(R.id.fragment_id_full_screen, budzMapHomeFragment, "1");                    }                    transaction.commitAllowingStateLoss();                }            }        });    }    @Override    public void ShowQAHomeScreen() {        tabOneClickedFunctionalty();    }    @Override    public void ShowQAHomeScreenAskQuestion() {        tabOneClickedFunctionalty();        new Handler().postDelayed(new Runnable() {            @Override            public void run() {                qa_homeTabFragment.QA_AskQuestion.performClick();            }        }, 50);    }    @Override    public void ShowStrainTab() {        tabStarinClicked();    }    @Override    public void ShowQuestions(HomeQAfragmentDataModel dataModel, boolean isOnlyId) {        ChangeStatusBarColor(HomeActivity.this, "#171717");        if (dataModel.getAnswerCount() == 0 && dataModel.getUser_id() == user.getUser_id()) {            QAUserNotifyScreenActivity.dataModel = dataModel;            GoTo(this, QAUserNotifyScreenActivity.class);        } else {            if (isOnlyId) {                discussQuestionFragment = new DiscussQuestionFragment(this, true, dataModel.getId());                discussQuestionFragment.dataModel = dataModel;            } else {                discussQuestionFragment = new DiscussQuestionFragment(this, false);                discussQuestionFragment.dataModel = dataModel;            }            FragmentManager manager = getSupportFragmentManager();            FragmentTransaction transaction = manager.beginTransaction();            transaction.setCustomAnimations(R.anim.fade_in, R.anim.fade_in);            transaction.add(R.id.fragment_id_full_screen, discussQuestionFragment, "1");            transaction.commitAllowingStateLoss();        }    }    @Override    public void ShowAnswers(HomeQAfragmentDataModel dataModel, int Answerid, boolean isOnlyAnswer) {        ChangeStatusBarColor(HomeActivity.this, "#171717");        if (isOnlyAnswer) {//            discussQuestionFragment = new DiscussQuestionFragment(this, false, true, Answerid + "", true);            discussQuestionFragment = new DiscussQuestionFragment(this, false, true, Answerid, true);            discussQuestionFragment.dataModel = dataModel;        } else {            discussQuestionFragment = new DiscussQuestionFragment(this, false, true, Answerid + "");            discussQuestionFragment.dataModel = dataModel;        }        FragmentManager manager = getSupportFragmentManager();        FragmentTransaction transaction = manager.beginTransaction();        transaction.setCustomAnimations(R.anim.fade_in, R.anim.fade_in);        transaction.add(R.id.fragment_id_full_screen, discussQuestionFragment, "1");        transaction.commitAllowingStateLoss();    }    @Override    public void ShowStrainSearch(HomeQAfragmentDataModel dataModel, final String keyword) {        bottomBar(false);        DetachExtraFragents();        DetachOtherTabFragments(3);        HomeActivity.this.runOnUiThread(new Runnable() {            @Override            public void run() {                transaction = manager.beginTransaction();                if (!strainTabFragment.isVisible()) {                    strainTabFragment = new StrainTabFragment(keyword);                    if (transaction.isEmpty()) {                        transaction.add(R.id.fragment_id_full_screen, strainTabFragment, "1");                    } else {                        transaction.replace(R.id.fragment_id_full_screen, strainTabFragment, "1");                    }                    transaction.commitAllowingStateLoss();                } else {                    strainTabFragment.SearchStrain(keyword);                }            }        });    }    @Override    public void AddFirstAnswerBudFragment(HomeQAfragmentDataModel dataModel) {    }    @Override    public void AddDiscussAnswerFragment(HomeQAfragmentDataModel dataModel) {    }    @Override    public void AddReplyAnswerFragment(HomeQAfragmentDataModel dataModel) {        ChangeStatusBarColor(HomeActivity.this, "#171717");        DiscussQuestionFragment.isRefreshable = true;        AnswerFragment answerFragment = new AnswerFragment();        answerFragment.dataModel = dataModel;        FragmentManager manager = getSupportFragmentManager();        FragmentTransaction transaction = manager.beginTransaction();        transaction.setCustomAnimations(R.anim.attatch_fragment_right_to_left, R.anim.attatch_fragment_right_to_left);        transaction.add(R.id.fragment_id_full_screen, answerFragment, "1");        transaction.commitAllowingStateLoss();    }    @Override    public void EditReplyAnswerFragment(HomeQAfragmentDataModel dataModel, QuestionAnswersDataModel answersDataModel) {        ChangeStatusBarColor(HomeActivity.this, "#171717");        DiscussQuestionFragment.isRefreshable = true;        EditAnswerFragment answerFragment = new EditAnswerFragment();        answerFragment.dataModel = answersDataModel;        FragmentManager manager = getSupportFragmentManager();        FragmentTransaction transaction = manager.beginTransaction();        transaction.setCustomAnimations(R.anim.attatch_fragment_right_to_left, R.anim.attatch_fragment_right_to_left);        transaction.add(R.id.fragment_id_full_screen, answerFragment, "1");        transaction.commitAllowingStateLoss();    }    @Override    public void callBack() {        if (Search_layout_view != null && Search_layout_view.getVisibility() == View.VISIBLE) {            clearSearch();        }    }    @Override    public void backHandle() {        transaction = manager.beginTransaction();        transaction.remove(discussQuestionFragment);        tabOneClickedFunctionalty();        discussQuestionFragment = null;        bottom_bar_layout.setVisibility(View.VISIBLE);    }    @Override    public void bottomBar(final Boolean state) {        if (state) {            bottom_bar_layout.setVisibility(View.GONE);        } else {            bottom_bar_layout.setVisibility(View.VISIBLE);        }    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);    }    @Override    public void onViewSpecialBtnClink(ShootOutAlertDialog dialog, ShootOutDataModel dataModel) {        Intent budzmap_intetn = new Intent(getApplicationContext(), BudzMapDetailsActivity.class);        budzmap_intetn.putExtra("budzmap_id", dataModel.getSub_user_id());        budzmap_intetn.putExtra("view_specials", true);        startActivity(budzmap_intetn);        dialog.dismiss();    }}